1e-8,
rep(1e-8, length(c(length(which(names(f$par) %in% c("alpha","beta"))))))),
upper=c(10,rep(5,length(which(names(f$par)%in% c("phi","theta")))),
500, rep(1,length(c(length(which(names(f$par) %in% c("alpha","beta"))))))))
matcoef <- data.frame(Estimates = fit$par,
SD = sqrt(diag(solve(f$he(fit$par)))))
matcoef$Zscore <- matcoef$Estimates/matcoef$SD
matcoef$Pvalue <- pnorm(abs(matcoef$Zscore), lower.tail=FALSE)
rownames(matcoef)<-names(unlist(parameters))
matcoef$Pvalue
names(fit$par)
matcoef
f$par
names(f$par)
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=parameters, map = map)
f$par
parameters
map=NULL
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=parameters, map = map)
parameters
f$par
unlist(parameters)
# Parameter list:
parameters <- list(mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1),
theta = matrix(c(-.42, -.2), ncol = 1),
omega = .9,
alpha = matrix(c(.1,.05,.2,.1), ncol = 1),
beta  = matrix(c(.6,.2), ncol = 1))
# Parameter list:
parameters <- list(mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1),
theta = matrix(c(-.42, -.2), ncol = 1),
omega = .9,
alpha = matrix(c(.1,.05,.2,.1), ncol = 2),
beta  = matrix(c(.6,.2), ncol = 1))
unlist(parameters)
f$par
strsplit(names(f$par))
?strsplit
grepl("phi",names(f$par))
grepl("mu", names(f$par))
length(which(grepl("mu", names(f$par))))
character(length(f$par))
nms <- character(length = length(f$par))
nms
nms <- names(f$par)
?make.names
makes.names(nms, unique=TRUE)
base::makes.names(nms, unique=TRUE)
base::make.names(nms, unique=TRUE)
make.unique(nms, sep="")
unlist(parameters)
library(starmagarch)
devtools::load_all(".")
#Set parameters$beta[2,1] to zero:
map <- parameterlist2maptemplate(parameters)
map$beta[2,1]<-as.factor(NA)
parameters$beta[2,1]<-0
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=parameters, map = map)
map <- list()
map$mu <- as.factor(NA)
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=parameters, map = map)
# Optimize the likelihood using:
fit <- fitSTARMAGARCH(f, data= y, parameters, print = FALSE)
make.unique
?make.names
?gsub
gsub("[[:digit:]]","",make.unique(rownames(matcoef)))
make.unique(rownames(matcoef))
rownames(matcoef)
rownames(f$par)
names(f$par)
make.unique(names(f$par))
make.unique(names(f$par), sep ="")
gsub("[[:digit:]]", "",make.unique(names(f$par), sep ="")
)
gsub("[[:digit:]]", "",make.unique(names(f$par), sep =""))
reshape2::colsplit(make.unique(names(f$par), sep=""), "(?<=\\p{L})(?=[\\d+$])", c("char", "digit"))
names <- names(f$par)
names
table(names)
k <- table(names)
k
names(k)
1:k[x]
x = k[1]
k[1]
x = names(k)[1]
x
names[x]
which(names==x)
i = names(k)[1]
paste(i, 1:k[i])
#' Function for fixing parameter names
#' @param names vector of names which are non-unique
#'
#' @return Vector with correct names
correct.names <- function(names){
if(!table(names)>1) return(names)
k <- table(names)
for(i in names(k)){
names[which(names==i)] <- paste(i, 1:k[i], sep="")
}
names
}
correct.names(f$par)
correct.names(names(f$par))
k <- table(names)
k
k <- k[which(k>1)]
k
for(i in names(k)){
names[which(names==i)] <- paste(i, 1:k[i], sep="")
}
names
library(starmagarch)
?correct.names
devtools::load_all(".")
correct.names
?correct.names
rm(parameterlist2maptemplate())
rm(parameterlist2maptemplate
)
rm(correct.names)
library(starmagarch)
library(starmagarch)
devtools::load_all(".")
rm(list=ls()
)
devtools::load_all(".")
library(starmagarch)
# Parameter list:
parameters <- list(mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1),
theta = matrix(c(-.42, -.2), ncol = 1),
omega = .9,
alpha = matrix(c(.1,.05,.2,.1), ncol = 2),
beta  = matrix(c(.6,.2), ncol = 1))
# Simulate data:
m <- c(25, 1)
burnin <- 300
W <- create.neighbourhood.array(m = m, sp = 2)
devtools::load_all(".")
W <- create.neighbourhood.array(m = m, sp = 2)
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 3000, type= "queen",
torus = TRUE)
W <- create.neighbourhood.array(m = m, sp = 3)
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 3000, type= "queen",
torus = TRUE)
nrow(parameters$alpha)
dim(W)
x <-  y <- matrix(0, ncol = n+burnin, nrow = prod(m[1:2]))
n <- 2500
type= "queen"
torus = TRUE
x <-  y <- matrix(0, ncol = n+burnin, nrow = prod(m[1:2]))
sig <- x + parameters$omega
t=2
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
1:min(ncol(parameters$alpha)
,t)
j=1
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
for(t in 2:ncol(y)){
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
}
t
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j]
1:min(ncol(parameters$beta),t)
1:min(ncol(parameters$alpha),t)
for(t in 2:ncol(y)){
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
#sapply(1:min(ncol(parameters$beta),t), function(j)
# apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
}
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])#+
for(t in 2:ncol(y)){
sig[,t]<-parameters$omega +
#sapply(1:min(ncol(parameters$alpha),t), function(j)
# apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
}
1:min(ncol(parameters$alpha),t)
1:nrow(parameters$alpha)
parameters$alpha[,j])
parameters$alpha[,j]
x[,t-j]^2)
x[,t-j]
w <- W[,,1]
w
w %*% x[,t-j]^2
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
j=2
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
j=2
1:min(ncol(parameters$alpha),t)
for(t in 2:ncol(y)){
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
}
x
str(x)
1:min(ncol(parameters$alpha),t)
t-1
t-2
1:min(ncol(parameters$alpha),t)
t
min(ncol(parameters$alpha),t-1)
min(ncol(parameters$beta),t-1)
for(t in 2:ncol(y)){
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t-1), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t-1), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
}
min(ncol(parameters$alpha),t-1)
t
t=2
x <-  y <- matrix(0, ncol = n+burnin, nrow = prod(m[1:2]))
sig <- x + parameters$omega
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t-1), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t-1), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
t=3
sig[,t]<-parameters$omega +
sapply(1:min(ncol(parameters$alpha),t-1), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])+
sapply(1:min(ncol(parameters$beta),t-1), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j])
x[,t]<-sqrt(sig[,t])*rnorm(prod(m))
1:min(ncol(parameters$alpha),t-1)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
j
j=1
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
j=2
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
sapply(1:min(ncol(parameters$alpha),t-1), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)
parameters$alpha[,j]
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]
sapply(1:min(ncol(parameters$alpha),t-1), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j])
sig[,t]<-parameters$omega +
rowSums(sapply(1:min(ncol(parameters$alpha),t-1), function(j)
apply(W[,,1:nrow(parameters$alpha)], 3, function(w) w %*% x[,t-j]^2)%*% parameters$alpha[,j]))+
rowSums(sapply(1:min(ncol(parameters$beta),t-1), function(j)
apply(W[,,1:nrow(parameters$beta)], 3, function(w) w %*% sig[,t-j])%*% parameters$beta[,j]))
library(starmagarch)
devtools::load_all(".")
# Simulate data:
m <- c(25, 1)
burnin <- 300
n <- 2500
W <- create.neighbourhood.array(m = m, sp = 3)
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = n, m = m, W=W, burnin = burnin, type= "queen",
torus = TRUE)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=parameters)
# Optimize the likelihood using:
fit <- fitSTARMAGARCH(f, data= y, parameters, print = FALSE)
warnings()
library(starmagarch)
devtools::load_all(".")
y <- simSTARMAGARCH(parameters, n = n, m = m, W=W, burnin = burnin, type= "queen",
torus = TRUE)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=parameters)
# Optimize the likelihood using:
fit <- fitSTARMAGARCH(f, data= y, parameters, print = FALSE)
summary(fit)
devtools::use_vignette("my-vignette")
browseVignettes("starma")
browseVignettes()
browseVignettes()
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(starmagarch)
library(starmagarch)
devtools::load_all(".")
devtools::load_all(".")
summary(fit)
library(starmagarch)
devtools::load_all(".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
parameters <- list(
mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1), #temporal order 1, spatial order 2
theta = matrix(c(-.42, -.2), ncol = 1),  #temporal order 1, spatial order 2
omega = .9,
alpha = matrix(c(.1, .05,
.2, .1), ncol = 2), # temporal order 2, spatial order 2
beta  = matrix(c(.6, .2), ncol = 1) #temporal order 1, spatial order 2
)
# spatial dimension:
m <- c(5, 5)
W <- create.neighbourhood.array(m = m, sp = 3, type = "queen", torus =TRUE)
# spatial dimension:
m <- c(25, 1)
W <- create.neighbourhood.array(m = m, sp = 3, type = "queen", torus =TRUE)
# spatial dimension:
m <- c(25, 1)
W <- create.neighbourhood.array(m = m, sp = 3, type = "rook", torus =TRUE)
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 500)   # 1
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, burnin = 500,        # 2
type= "queen", torus = TRUE)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 500)   # 1
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 500)   # 1
y <- simSTARMAGARCH(parameters, n = 2500, m = m, burnin = 500,        # 2
type= "rook", torus = TRUE)
parameters <- list(
mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1), #temporal order 1, spatial order 2
theta = matrix(c(-.42, -.2), ncol = 1),  #temporal order 1, spatial order 2
omega = .9,
alpha = matrix(c(.09, .13,
.03, ..7), ncol = 2), # temporal order 2, spatial order 2
beta  = matrix(c(.5, .2), ncol = 1) #temporal order 1, spatial order 2
)
parameters <- list(
mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1), #temporal order 1, spatial order 2
theta = matrix(c(-.42, -.2), ncol = 1),  #temporal order 1, spatial order 2
omega = .9,
alpha = matrix(c(.09, .13,
.03, .7), ncol = 2), # temporal order 2, spatial order 2
beta  = matrix(c(.5, .2), ncol = 1) #temporal order 1, spatial order 2
)
parameters <- list(
mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1), #temporal order 1, spatial order 2
theta = matrix(c(-.42, -.2), ncol = 1),  #temporal order 1, spatial order 2
omega = .9,
alpha = matrix(c(.09, .13,
.03, .07), ncol = 2), # temporal order 2, spatial order 2
beta  = matrix(c(.5, .2), ncol = 1) #temporal order 1, spatial order 2
)
sum(parameters$alpha,parameters$beta)
parameters <- list(
mu    = 5,
phi   = matrix(c(.8, .1), ncol = 1), #temporal order 1, spatial order 2
theta = matrix(c(-.42, -.2), ncol = 1),  #temporal order 1, spatial order 2
omega = .9,
alpha = matrix(c(.09, .13,
.03, .07), ncol = 2), # temporal order 2, spatial order 2
beta  = matrix(c(.5, .15), ncol = 1) #temporal order 1, spatial order 2
)
sum(parameters$alpha,parameters$beta)
# spatial dimension:
m <- c(25, 1)
W <- create.neighbourhood.array(m = m, sp = 3, type = "rook", torus =TRUE)
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 500)   # 1
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 500)   # 1
y <- simSTARMAGARCH(parameters, n = 2500, m = m, burnin = 500,        # 2
type= "rook", torus = TRUE)
initial.parameters <- list(
mu    = 0,
phi   = matrix(c(.01, .01), ncol = 1),
theta = matrix(c(.01, .01), ncol = 1),
omega = sd(y),
alpha = matrix(c(.01, .01,
.01, .01), ncol = 2),
beta  = matrix(c(.01, .01), ncol = 1)
)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=initial.parameters)
ggplot(data=melt(y), aes(Var2,Var1))+ geom_raster(aes(fill = value))+
scale_fill_gradient2(low="blue", mid="white", high = "red") + xlab("Time") + ylab("Space") +
theme_bw()
ggplot(data=melt(y), aes(Var2,Var1))+ geom_raster(aes(fill = value))+
scale_fill_gradient2(low="blue", mid="white", high = "red", midpoint = mean(y)) + xlab("Time") + ylab("Space") +
theme_bw()
initial.parameters <- list(
mu    = 0,
phi   = matrix(c(.01, .01), ncol = 1),
theta = matrix(c(.01, .01), ncol = 1),
omega = sd(y),
alpha = matrix(c(.01, .01,
.01, .01), ncol = 2),
beta  = matrix(c(.01, .01), ncol = 1)
)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=initial.parameters)
fit <- fitSTARMAGARCH(f, data= y, print = FALSE)
fit
fit$optimization
initial.parameters <- list(
mu    = mean(y),
phi   = matrix(c(.01, .01), ncol = 1),
theta = matrix(c(.01, .01), ncol = 1),
omega = var(c(y)),
alpha = matrix(c(.01, .01,
.01, .01), ncol = 2),
beta  = matrix(c(.01, .01), ncol = 1)
)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=initial.parameters)
fit <- fitSTARMAGARCH(f, data= y, print = FALSE)
summary(fit)
summary(fit)
plot(fit)
plot_garch(fit)
initial.parameters
parameters
initial.parameters <- list(
mu    = mean(y),
phi   = matrix(c(.7, .01), ncol = 1),
theta = matrix(c(.01, .01), ncol = 1),
omega = var(c(y)),
alpha = matrix(c(.01, .01,
.01, .01), ncol = 2),
beta  = matrix(c(.01, .01), ncol = 1)
)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=initial.parameters)
fit <- fitSTARMAGARCH(f, data= y, print = FALSE)
summary(fit)
devtools::build_vignettes()
library(starmagarch)
library(starmagarch)
library(starmagarch)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(starmgarch)
library(starmagarch)
W <- create.neighbourhood.array(m = m, sp = 3, type = "rook", torus =TRUE)
library(starmagarch)
W <- create.neighbourhood.array(m = m, sp = 3, type = "rook", torus =TRUE)
library(starmagarch)
library(starmagarch)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(1234)
y <- simSTARMAGARCH(parameters, n = 2500, m = m, W=W, burnin = 500)   # 1
mean(y)
var(c(y))
initial.parameters <- list(
mu    = mean(y),
phi   = matrix(c(.7, .01), ncol = 1),
theta = matrix(c(.01, .01), ncol = 1),
omega = 1,
alpha = matrix(c(.01, .01,
.01, .01), ncol = 2),
beta  = matrix(c(.01, .01), ncol = 1)
)
# Create likelihood object:
f <- CreateLikelihood(y, W=W,
init = apply(y,1,var), parameters=initial.parameters)
fit <- fitSTARMAGARCH(f, data= y, print = FALSE)
summary(fit)
library(starmagarch)
file.exists("~/.ssh/id_rsa.pub")
View(x)
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
